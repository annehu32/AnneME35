from machine import I2C, Pin
import uasyncio as asyncio
import struct
import math

class Acceleration():
    def __init__(self, scl, sda, indicatorPin, addr = 0x62):
        self.addr = addr
        self.i2c = I2C(1,scl=scl, sda=sda, freq=100000) 
        self.connected = False
        if self.is_connected():
            print('connected')
            asyncio.create_task(self.write_byte(0x11,2)) #start data stream
        self.isTap = False # tap flag
        self.indicator = indicatorPin

    def is_connected(self):
        options = self.i2c.scan() 
        print(options)
        self.connected = self.addr in options
        return self.connected 
            
    async def read_accel(self):
        buffer = self.i2c.readfrom_mem(self.addr, 0x02, 6) # read 6 bytes starting at memory address 2
        await asyncio.sleep(0.01)
        return struct.unpack('<hhh',buffer)

    async def write_byte(self, cmd, value):
        self.i2c.writeto_mem(self.addr, cmd, value.to_bytes(1,'little'))

    # IN PROGRESS: function to detect accelerometer event
    TAP_THRESHOLD = 18000
    async def read_event(self):
        print('-------ACCEL.READ_EVENT CALLED-----')
        while True:
            try:
                data = await self.read_accel()
                mag = math.sqrt(data[0]**2 + data[1]**2 + data[2]**2)
                await asyncio.sleep(0.01)
            
                if mag > self.TAP_THRESHOLD:
                    print(mag)
                    self.isTap = True
                    self.indicator.on()
                    await asyncio.sleep(0.05)
                    self.indicator.off()
            except Exception as e:
                print(f"Error in read_event: {e}")
            await asyncio.sleep(0.1)

# scl = Pin('GPIO27', Pin.OUT)
# sda = Pin('GPIO26', Pin.OUT)

# t = Acceleration(scl, sda)

# for i in range(100):
#     print(t.read_accel())
#     time.sleep(0.1)
    
